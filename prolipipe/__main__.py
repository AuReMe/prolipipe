#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Tue Jan 10 2023

@author: ytirlet, norobert

usage: __main__.py [-h] -d DIRECTORY -t TAXFILE -p PWY_FOLD

Prolipipe pipeline for large-scale assessment of metabolic profiles on bacteria focusing on specific pathways.

options:
  -h, --help            show this help message and exit
  -d DIRECTORY, --dir DIRECTORY
                        Path to the directory where merged padmet files are present and outputs will be generated
  -t TAXFILE, --tax TAXFILE
                        path of the taxon file (.tsv)
  -p PWY_FOLD, --pwy PWY_FOLD
                        Path to the folder with the pathways.txt files for all wanted metabolites.
"""

from __future__ import print_function
import os
import argparse

import utils
import analysis

# FUNCTIONS ---------------------------------------------------------------------------------


def parser() : 
    parser = argparse.ArgumentParser(description="Prolipipe pipeline for large-scale assessment of metabolic profiles on bacteria focusing on specific pathways.")
    
    ## arguments 
    parser.add_argument("-d", "--dir", required=True, dest="directory",help="Path to working directory for Prolipipe containing tsv_files directory generated by MeReco.")
    parser.add_argument("-t", "--tax", required=True, dest="taxfile",help="path of the taxon file (.tsv)")
    parser.add_argument("-p", "--pwy", required=True, dest="pwy_fold", help="Path to the folder with the pathways.txt files for all wanted metabolites.")
    
    return parser.parse_args()

def map_pwys_to_GSMs(options) :
    """
        Check "reactions.tsv" file presence, prepare output directory and launch analysis
    """
    taxon_file = options.taxfile
    dir = options.directory
    pwy_dir = options.pwy_fold

    ## check file presence 
    reactions_file = os.path.join(dir, 'tsv_files', 'reactions.tsv')
    if not os.path.isfile(reactions_file) : 
        raise ValueError(f"ERROR : no reactions.tsv file found in {reactions_file}. Aborting.")
    
    ## output dir generation
    output_metabo = os.path.join(dir, 'metabo_files')
    utils.mkdir(output_metabo)

    ## launch analysis 
    analysis.generate_res_files(reactions_file, pwy_dir, taxon_file, output_metabo, col_filename="Filename")

    return output_metabo

# ---------------------------------------------------------------------------------------------

def main():

    ## parsing arguments 
    options = parser()

    ## generate results 
    output_metabo = map_pwys_to_GSMs(options)

    print("\nThank you for using Prolipipe !")

if __name__ == "__main__":
    main()
