#!/home/genouest/dyliss/norobert/miniconda3/envs/prolific/bin python3
# -*- coding: utf-8 -*-

"""
Created on Tue Jan 10 2023

@author: ytirlet, norobert

usage: prolipipe.py [-h] -i INPUT_TSV -d OUTPUTDIR --tax TAXFILE --pwy PWY_FOLD --strain STRAIN [-a]

Prolipipe pipeline for large-scale assessment of metabolic profiles on bacteria focusing on specific pathways.

options:
  -h, --help            Show this help message and exit
  -i, --input INPUT_TSV Path to the reactions.tsv file generated by MeReco.
  -d, --dir OUTPUTDIR   Path to the folder where you want to put the results in.
  --tax TAXFILE         Path of the taxon file (.tsv)
  --pwy PWY_FOLD        Path to the folder with the pathways.txt files for all wanted metabolites.
  --strain STRAIN       Path to the strains file.
  -a, --asko            Launch the creation of the askomics files (optional).
"""

from __future__ import print_function
import os
import argparse

import utils
import analysis
import askomics

# FUNCTIONS ---------------------------------------------------------------------------------


def parser() : 
    parser = argparse.ArgumentParser(description="Prolipipe pipeline for large-scale assessment of metabolic profiles on bacteria focusing on specific pathways.")
    
    ## arguments 
    parser.add_argument("-i", "--input", required=True, dest="input",help="Path to the reaction.tsv file generated by MeReco.")
    parser.add_argument("-d", "--dir", required=True, dest="directory",help="Path to the folder where you want to put the results in.")
    parser.add_argument("--tax", required=True, dest="taxfile",help="path of the taxon file (.tsv)")
    parser.add_argument("--pwy", required=True, dest="pwy_fold", help="Path to the folder with the pathways.txt files for all wanted metabolites.")
    parser.add_argument("--strain", required=True, dest="strain", help="Path to the strains file.")

    ## flags 
    parser.add_argument("-a","--asko", action="store_true", dest="asko", help="Launch the creation of the askomics files.")

    return parser.parse_args()

# NOT CALLED
def compare_padmet(options): 
    """
        From a set of padmets files, compare them to generate global files such as reactions.tsv
        Inputs : 
            output_path (str) : path to Prolipipe's output
            options (parser) : arguments from parser
    """
    ## define arguments
    output_path = options.directory
    
    ## prepare pathes and output
    output_merged = os.path.join(output_path, 'merged_padmet')
    output_tsv = os.path.join(output_path, 'tsv_files')
    
    ## remove precedent files to update results
    utils.remove(os.path.join(output_path, 'tsv_files'))
    utils.mkdir(output_tsv)

    ## run comparison
    command_compare_padmet = f"padmet compare_padmet --padmet={output_merged} --output={output_tsv} -v"
    utils.bigprint(command_compare_padmet)
    os.system(command_compare_padmet)


def map_pwys_to_GSMs(options) :
    
    taxon_file = options.taxfile
    strain_file = options.strain
    output_path = options.directory
    pwy_dir = options.pwy_fold
    reactions_file = options.input

    ## output files generation
    output_metabo = os.path.join(output_path, 'metabo_files')
    utils.mkdir(output_metabo)

    ## check file presence 
    if not os.path.isfile(reactions_file) : 
        raise ValueError(f"ERROR : no reactions.tsv file found in {reactions_file}. Aborting.")
    
    ## launch analysis 
    analysis.generate_res_files(reactions_file, pwy_dir, taxon_file, strain_file, output_metabo, col_filename="Filename")

    return output_metabo

# ---------------------------------------------------------------------------------------------

if __name__ == "__main__":

    ## parsing arguments 
    options = parser()

    ## generate results 
    output_metabo = map_pwys_to_GSMs(options)

    ## convert them to askomics files 
    if options.asko == True :
        strain_file = options.strain
        output_dir = os.path.join(options.directory, "asko_files")
        askomics.build_askomics_files (output_metabo, output_dir, strain_file)
    
    print("\nThank you for using Prolipipe !")